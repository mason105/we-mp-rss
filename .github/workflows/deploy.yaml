name: Deploy to Server
on:
  workflow_dispatch:
  # Removed push.tags trigger to prevent race condition
  # Deploy is automatically triggered by build workflow after successful build

jobs:
  Deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
          fetch-depth: 0

    - name: Get the tag
      id: tag
      run: |
        if [ ${GITHUB_REF#refs/*/} == RC* ]; then export LATEST_TAG=${GITHUB_REF#refs/*/}; else export LATEST_TAG=$(git describe --tags `git rev-list --tags --max-count=1`); fi
        echo "TAG=$LATEST_TAG" >> $GITHUB_OUTPUT

    - name: Get short SHA
      id: sha
      run: echo "sha7=$( echo $( git show-ref ${{ steps.tag.outputs.TAG }}  | cut -c1-7 ) )" >> $GITHUB_OUTPUT

    - name: Deploy
      uses: nanjingrd/ssh-deploy-action@master
      id: main
      env:
        SYNCED_RUN_ID: ${{github.run_id}}
        ID_RSA_P: ${{ secrets.VAR_ID_RSA_P }}
        TARGET_KEY: ${{ secrets.VAR_ID_RSA_P }}
        TARGET_HOST: ${{ secrets.TARGET_HOST }}
        TARGET_PORT: ${{ secrets.TARGET_PORT }}
        TARGET_USER: ${{ secrets.TARGET_USER }}
        JUMP_USER: ${{ secrets.JUMP_USER }}
        JUMP_HOST: ${{ secrets.JUMP_HOST }}
        JUMP_KEY: ${{ secrets.VAR_ID_RSA_P }}
        CI_PROJECT_NAME: "we-mp-rss"
        DOCKER_CONTAINER_NAME: "we-mp-rss_CD"
        DOCKER_IMG_NAME: "we-mp-rss"
        DOCKER_IMG_TAG: ${{ steps.sha.outputs.sha7 }}
        CI_COMMIT_REF_NAME: ${{ steps.tag.outputs.TAG }}
        CI_REGISTRY_URL: ${{ secrets.VAR_REGISTRY_URL }}
        REGISTRY_username: ${{ secrets.VAR_REGISTRY_USERNAME }}
        REGISTRY_password: ${{ secrets.VAR_REGISTRY_PASSWORD }}

        COMMAND: |
          #/bin/bash
          set -ex
          date
          echo "CI_PROJECT_NAME=""${CI_PROJECT_NAME}"
          echo "CI_COMMIT_REF_NAME=""${CI_COMMIT_REF_NAME}"

          mkdir -p /tmp/${CI_PROJECT_NAME}
          cd /tmp/${CI_PROJECT_NAME}

          # Create necessary directories if they don't exist
          mkdir -p /home/daqian/docker/${CI_PROJECT_NAME}/config
          mkdir -p /home/daqian/docker/${CI_PROJECT_NAME}/data
          mkdir -p /home/daqian/docker/${CI_PROJECT_NAME}/data/cache
          mkdir -p /home/daqian/docker/${CI_PROJECT_NAME}/data/pdf
          mkdir -p /home/daqian/docker/${CI_PROJECT_NAME}/data/markdown

          docker login --username=${REGISTRY_username} ${CI_REGISTRY_URL} -p${REGISTRY_password}
          docker pull ${CI_REGISTRY_URL}/mason105/${DOCKER_IMG_NAME}:${DOCKER_IMG_TAG}
          docker rm $( docker stop $( docker update --restart=no  $( docker ps -a -q --filter name=${DOCKER_CONTAINER_NAME}* --format='{{.ID}}'))) || true

          # Ensure config.yaml is a file, not a directory
          if [ -d /home/daqian/docker/${CI_PROJECT_NAME}/config/config.yaml ]; then
            echo "Config path is a directory, removing it..."
            rm -rf /home/daqian/docker/${CI_PROJECT_NAME}/config/config.yaml
          fi
          if [ -f /home/daqian/docker/${CI_PROJECT_NAME}/config/config.yaml ]; then
            echo "Config file exists, removing to ensure clean state..."
            rm -f /home/daqian/docker/${CI_PROJECT_NAME}/config/config.yaml
          fi
          echo "Creating default empty config file..."
          echo "" > /home/daqian/docker/${CI_PROJECT_NAME}/config/config.yaml

          docker run  -itd  --name=${DOCKER_CONTAINER_NAME}_${CI_COMMIT_REF_NAME} --restart=always --add-host=host.docker.internal:host-gateway -e TZ=Asia/Shanghai -p 8002:8001 -v /home/daqian/docker/${CI_PROJECT_NAME}/config/config.yaml:/app/config.yaml -v /home/daqian/docker/${CI_PROJECT_NAME}/data:/app/data  ${CI_REGISTRY_URL}/mason105/${DOCKER_IMG_NAME}:${DOCKER_IMG_TAG}

          docker image prune -a -f --filter='label=image_autoclean=true'

        POSTCOMMAND: |
          #/bin/bash
          echo "Deployment completed"
          rm -rf /tmp/${CI_PROJECT_NAME}

    - name: Send Slack notification
      if: always()
      run: |
        if [[ ${{ steps.main.outputs.return_code }} -ne 0 ]]; then
          STATUS="❌ FAILED"
          COLOR="#FF0000"
          MESSAGE="Deploy FAILED, please contact admin"
        else
          STATUS="✅ Success"
          COLOR="#36a64f"
          MESSAGE="Deploy succeeded"
        fi

        PAYLOAD=$(cat <<EOF
        {
          "attachments": [
            {
              "color": "${COLOR}",
              "title": "${{ github.event.repository.name }} - Deploy ${STATUS}",
              "fields": [
                {
                  "title": "Status",
                  "value": "${MESSAGE}",
                  "short": true
                },
                {
                  "title": "Return Code",
                  "value": "${{ steps.main.outputs.return_code }}",
                  "short": true
                },
                {
                  "title": "Tag",
                  "value": "${{ steps.tag.outputs.TAG }}",
                  "short": true
                },
                {
                  "title": "Commit",
                  "value": "${{ steps.sha.outputs.sha7 }}",
                  "short": true
                },
                {
                  "title": "Triggered by",
                  "value": "${{ github.actor }}",
                  "short": true
                },
                {
                  "title": "Workflow",
                  "value": "<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Workflow>",
                  "short": true
                }
              ],
              "footer": "GitHub Actions",
              "ts": $(date +%s)
            }
          ]
        }
        EOF
        )

        curl -X POST -H 'Content-type: application/json' \
          --data "${PAYLOAD}" \
          "${{ secrets.VAR_SLACK_WEBHOOK_URL }}"
